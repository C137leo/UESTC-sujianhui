<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sujianhui.materialsManagement.dao.MaterialsMapper">
    <resultMap id="materialMap" type="com.sujianhui.materialsManagement.model.MaterialsDTO">
        <id property="id" column="id"/>
        <!--property中的内容是对实体的映射，对应于materialsDto中的属性-->
        <result property="name" column="name"/>
        <result property="singlePrice" column="price"/>
        <result property="stockNum" column="stock_num"/>
        <result property="storeNum" column="amount"/>
        <result property="borrowNum" column="b_amount"/>
    </resultMap>
    <!--在materials表中添加materials-->
    <insert id="saveMaterials" useGeneratedKeys="true" keyProperty="id" keyColumn="id" parameterType="com.sujianhui.materialsManagement.model.MaterialsDTO">
    INSERT INTO materials(id,name,price) values(#{id},#{name},#{singlePrice})
    </insert>
    <!--在materials_stock表中添加materials表示目前存储的数量-->
    <insert id="createMaterialsStock" useGeneratedKeys="true" keyProperty="id" keyColumn="id" parameterType="com.sujianhui.materialsManagement.model.Stock">
    INSERT INTO materials_stock values(#{id},#{materialId},#{stockNum})
    </insert>
    <!--在store_item表中添加materials表示存进来的数量（包括归还和买进这类物品）-->
    <insert id="createMaterialsStore" useGeneratedKeys="true" keyProperty="id" keyColumn="id" parameterType="com.sujianhui.materialsManagement.model.Store">
    INSERT INTO store_item(id,material_id,amount) values(#{id},#{materialId},#{storeNum})
    </insert>
    <!--在borrow_item表中添加materials表示借出去的数量（包括借出和消耗掉的这类物品）-->
    <insert id="createMaterialsBorrow" useGeneratedKeys="true" keyProperty="id" keyColumn="id" parameterType="com.sujianhui.materialsManagement.model.Borrow">
    INSERT INTO borrow_item(id,material_id,b_amount) values(#{id},#{materialId},#{borrowNum})
    </insert>

    <!--从多表查询materials的所有信息-->
    <select id="getAllMaterials" resultMap="materialMap">
    select materials.id, materials.name,materials.price,ms.stock_num,s.amount,b.b_amount
    from materials
    JOIN materials_stock AS ms ON materials.id = ms.material_id
    JOIN store_item AS s ON materials.id = s.material_id
    JOIN borrow_item AS b ON materials.id = b.material_id
    </select>

    <!--从多表中查询单个material的所有信息-->
    <select id="getMaterials" resultMap="materialMap" parameterType="java.lang.Integer">
    select materials.name,materials.price,ms.stock_num,s.amount,b.b_amount
    from materials
    JOIN materials_stock AS ms ON materials.id = ms.material_id
    JOIN store_item AS s ON materials.id = s.material_id
    JOIN borrow_item AS b ON materials.id = b.material_id
    WHERE materials.id=#{id}
    </select>
    <!--从多表中查询单个material的所有信息-->
    <select id="getMaterialsId" resultType="java.lang.Integer" parameterType="java.lang.String">
    select id
    from materials
    WHERE name=#{name}
    </select>

    <!--从多表中查询单个material的所有信息-->
    <select id="selectMaterialsByName" resultType="com.sujianhui.materialsManagement.model.Materials" parameterType="java.lang.String">
    select *
    from materials
    WHERE materials.name=#{name}
    </select>

    <!--从多表中用姓名查询单个material的所有信息-->
    <select id="checkMaterials" resultMap="materialMap" parameterType="java.lang.String">
    select materials.name,materials.price,ms.stock_num,s.amount,b.b_amount
    from materials
    JOIN materials_stock AS ms ON materials.id = ms.material_id
    JOIN store_item AS s ON materials.id = s.material_id
    JOIN borrow_item AS b ON materials.id = b.material_id
    WHERE materials.name=#{name}
    </select>

    <!--从多表中用姓名查询单个material的所有信息,针对的方法不同-->
    <select id="getMaterialsByName" resultMap="materialMap" parameterType="java.lang.String">
    select materials.id,materials.name,materials.price,ms.stock_num,s.amount,b.b_amount
    from materials
    JOIN materials_stock AS ms ON materials.id = ms.material_id
    JOIN store_item AS s ON materials.id = s.material_id
    JOIN borrow_item AS b ON materials.id = b.material_id
    WHERE materials.name=#{name}
    </select>


    <!--多表的更新-->
    <update id="updateMaterials" parameterType="com.sujianhui.materialsManagement.model.MaterialsDTO">
    update materials
    JOIN materials_stock AS ms ON materials.id = ms.material_id
    JOIN store_item AS s ON materials.id = s.material_id
    JOIN borrow_item AS b ON materials.id = b.material_id
    set materials.price = #{singlePrice,jdbcType=DECIMAL},
    materials.name = #{name,jdbcType=VARCHAR},
    ms.stock_num = #{stockNum,jdbcType=INTEGER},
    s.amount= #{storeNum,jdbcType=INTEGER},
    b.b_amount= #{borrowNum,jdbcType=INTEGER}
    where materials.id=#{id}
    </update>

    <!--对materials元素的删除-->
    <delete id="deleteMaterialsById" parameterType="java.lang.Integer">
        DELETE materials,ms,s,b FROM materials
        JOIN materials_stock AS ms ON materials.id = ms.material_id
        JOIN store_item AS s ON materials.id = s.material_id
        JOIN borrow_item AS b ON materials.id = b.material_id
        WHERE materials.id= #{id}
    </delete>
</mapper>